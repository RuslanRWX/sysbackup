#!/usr/bin/python
# Copyright (c) 2017 Ruslan Variushkin,  ruslan@host4.biz
# Version 0.3.0
import sys
import SB
import os
import re


# mail variables 
MysqlOptDef = "--opt  --routines"
PortDef = 22
UserDef = "root"
RsyncOptDef = "-av"
PrivDef = 20
DirsDef = "/etc,/var"
DirIncDef = "/var/backup"
DirExDef = "/etc/ssh,/var/log"
FrequencyDef = 24
CleanDateDef = 7
DBexDef = "information_schema,performance_schema"

# text
tStart = "##########################\n"
tServName = "Server name: "
tServIP = "Server IP: "
tUser = "User:"
tServPort = "Server ssh port: "
tPriy = "Priority: "
tOpR = "Options of rsync: "
tLastD = "Last date of started backup: "
tLastDN = "Last date of end backup: "
tDirB = "Directories of backup "
tDirBx = "Directories of exclude "
tFB = "Frequency of backup, hours: "
tCleanB = "Clean the backup server, days: "
tAOS = "##########################    amount of servers "
tHavenot = "Haven't got any host !\nBye "
tCheckInf = "Check information\nName: "
tDir = "Directory :"
tDirEx = "Exclude directory :"
tDataCor = "Data are correct? yes|no: "
tBye = "Bye!"
tPlease = "Please respond with 'yes' or 'no'"
tAddsshKey = "Add sshkey, please, prepare to enter a password of remote server of its first to connect"
tDuD = 'Do you really want to delete host? '
tDirBInc = "Mysqlump directory: "
tDoUBackupMysql = "Do you want to backup MySQL? yes|no: "
tResdf = "Result of \"df -h\" on your remote server"
tInstClient = "A client for MySQL backuping has been installed to the remote host, sbcl.py"
tDoUexdb = "Do you want to exclude any databases? yes|no: "
tUdb = "Your databases: "
tDBex = "Exclude databases: "
tChmy = "Backup mysql: "
tMyDumpOpt = "MySQL dump options: "
tMysqlLog = "MysqlLog: "
tSbcltext = "Add a job in /etc/crontab, default: [ "
tSbclCron = "0 0    * * * root /usr/sbin/sbcl.py mysqldump"
tSbcltext2 = " ] You can add other job, format for crontab file : "
tDateStartMysql = "Mysqldump start localtime: "
tDateStopMysql = "Mysqldump stop localtime: "
tMysqlUpdate = "Do you want to reconfiguration mysqldump on the remote host ? ['yes','no' or 'rm' (for remove) ]: "
tNote = """Note that rsync must be installed on your remote server.
If you using mysql backup, please, check that mysqldump is installed and a local configuration file ~/.my.cnf is configured """
tCheckRsync = "Is the Rsync installed on your remote server ? ['yes' or 'no']: "
tPlInR = "Please, install the rsync on your remote server !"
tCheckMy = "Is the file ~/.my.cnf configured ?  ['yes' or 'no']: "
tPlconfMy = "Please, configure the ~/.my.cnf for databases access "
tDefMysqlOpt = " you can add --ignore-table=db.table [default: " + MysqlOptDef + " ]: "
tdefExDb =  "[default: information_schema,performance_schema]: "
tDuDel = "Do you want to purge ['yes' or 'on']: "
Defroot = "[default:"+UserDef+"] "
Defport = "[default: "+ str(PortDef) +" ] "
Defop = "[default:"+RsyncOptDef+"] "
Defpri = "[default: "+  str(PrivDef) +" ] "
DefFr = "[default: "+ str(FrequencyDef) +"] "
DefClean = "[default "+ str(CleanDateDef)+"] "
ExampleDir = "example["+DirsDef+"] "
ExampleDirEx = "example["+DirExDef+"] "
ExampleIncDir = "example["+DirIncDef+"] " 
ExampleExDB = "example["+DBexDef+"] "
tStatus = "Status: "
tDelCronResult = "Cron job sbcl.py has been removed on the remote host"
tAddtoCron = " add to /etc/crontab"
tEndofUpdate = "Configuration has been modified"


def Yellow(data):
    from colorama import Fore, Style
    return (Fore.YELLOW + data + Style.RESET_ALL)


def MongoIn(Name, User, ServerIP, ServerPort, RsyncOpt,
    Priv, Dirs, DirsExclude, Frequency, CleanDate, Chmy, MyDumpOpt, DirsInc, DBex ):
    SB.MongoCon()
    data = [{"Name": Name, "User": User,  "ServerIP": ServerIP, "ServerPort": ServerPort, 
        "RsyncOpt": RsyncOpt, "Priv": Priv, "Dirs": Dirs, "DirsExclude": DirsExclude, "DateStart": "", 
            "DateEnd": "", "Frequency": Frequency,  "CleanDate": CleanDate, "Chmy": Chmy, "MyDumpOpt": MyDumpOpt, 
                "DirsInc": DirsInc, "DBex": DBex,  "MysqlReady":"", "MysqlLog":"", "DateStartMySQL":"", 
                    "DateStopMySQL":"", "Status":"Never"  }]
                    
    SB.coll.insert(data, True)


def List(allservers):
    from colorama import Fore, Style
    global count 
    count = 0
    for R in allservers:
        count = count + 1
        global ServerName
        ServerName = R['Name']
        global User
        User = R['User']
        global ServerIP
        ServerIP = R['ServerIP']
        global ServerPort
        ServerPort = R['ServerPort']
        global Priv
        Priv = R['Priv']
        global RsyncOpt
        RsyncOpt = R['RsyncOpt']
        global Dirs
        Dirs = R['Dirs']
        global DirsExclude
        DirsExclude = R['DirsExclude']
        global Frequency
        Frequency = R['Frequency']
        global CleanDate
        CleanDate = R['CleanDate']
        global id
        id = R['_id']
        global Status
        Status = R['Status']
        global Chmy
        Chmy = R['Chmy']
        global DBex
        DBex = R['DBex']
        global MyDumpOpt
        MyDumpOpt = R["MyDumpOpt"]
        global DirsInc
        DirsInc = str(R["DirsInc"])
        global MysqlLog
        MysqlLog = R["MysqlLog"]
        
        print tStart
        print (Fore.YELLOW + tServName + ServerName)
        print tServIP,  ServerIP
        print(Style.RESET_ALL)
        print tUser, User
        print tServPort, ServerPort
        print tPriy, Priv
        print tOpR + RsyncOpt
        print tStatus  + Status
        if R['DateStart']:
            print tLastD + R['DateStart']
        if R['DateEnd']:
            print tLastDN + R['DateEnd']
        print tDir + Dirs
        print tDirEx + DirsExclude
        print tFB,  Frequency
        print tCleanB, CleanDate
        print tChmy, Chmy
        if Chmy == 'YES':
            print tDirBInc + DirsInc
            print tDBex + DBex
            print tMyDumpOpt + MyDumpOpt
            if MysqlLog == "Error":
                print (Fore.RED + tMysqlLog + MysqlLog + Style.RESET_ALL) 
            print tDateStartMysql + R['DateStartMySQL']
            print tDateStopMysql + R['DateStopMySQL']+"\n"
    print tAOS, count
    if count == 0:
        print tHavenot        
        return


def MongoList():
    SB.MongoCon()
    allservers = list(SB.coll.find())
    return List(allservers)


def MongoFind(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": {'$regex': Name}}))
    return List(allservers)

def MongoFindName(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    return List(allservers)


def PrCheck(Name, User, ServerIP, ServerPort, RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate):
    print tCheckInf + Name + "\n"+ tUser, User, "\n"+ tServIP, ServerIP, "\n"+tServPort,  ServerPort
    print tOpR + RsyncOpt + "\n"+tPriy,  Priv, "\n"+tDir + Dirs + "\n"+ tDirEx + DirsExclude 
    print tFB, Frequency, "\n"+ tCleanB, CleanDate


def Repl(data):
    return data.replace(' ', '').replace('\t', '')


def MongoUpdate(Name):
    CronN = None
    ChmyNReal = None
    MongoFindName(Name)
    MyDumpOptN=MyDumpOpt
    DirsIncN=DirsInc
    DBexN=DBex
    ChmyN=Chmy
    if count == 0:
        return
    if Chmy == "NO":
        tRmDel = None
    ServerNameN = raw_input(
        tServName +Yellow(' [Now:' + ServerName + ']: ')) or ServerName
    ServerNameN = Repl(ServerNameN)
    checkip="True"
    while checkip:
        ServerIPN = raw_input(
            tServIP + Yellow(' [Now:' + ServerIP + '] : ')) or ServerIP
        pat = re.compile("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
        resultip=pat.match(ServerIP)
        if resultip:
            checkip=None
        else:
            checkip="True"
    UserN = raw_input(
        tUser + Defroot +Yellow(' [Now:' + User + ']: ')) or User
    ServerPortN = raw_input(
        tServPort + Defport +Yellow(' [Now: ' + str(ServerPort) + ' ] : ')) or ServerPort
    RsyncOptN = raw_input(
        tOpR + Defop +Yellow(' [Now:' + RsyncOpt + ']: ')) or RsyncOpt
    PrivN = raw_input(tPriy  +Yellow(' [ Now:' + str(Priv) + ' ]: ')) or Priv
    DirsN = raw_input(tDir + ExampleDir +Yellow(' [ Now:' + Dirs + ' ]: ')) or Dirs
    DirsExcludeN = raw_input(
        tDirEx + ExampleDirEx +Yellow(' [ Now:' + DirsExclude + ']: ')) or DirsExclude
    FrequencyN = int(raw_input(
        tFB +Yellow(' [ Now:' + str(Frequency) + ' ]: ')) or Frequency)
    CleanDateN = int(raw_input(
        tCleanB + Yellow(' [ Now:' + str(CleanDate) + ' ]: ')) or CleanDate)
    #PrCheck(ServerNameN, UserN, ServerIPN, ServerPortN, RsyncOptN,
    #        PrivN, DirsN, DirsExcludeN, FrequencyN, CleanDateN)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    rm = set(['rm'])
    choice = raw_input(tMysqlUpdate).lower()
    connect="ssh -p{Port} {User}@{IP} ".format(Port=ServerPortN, User=UserN, IP=ServerIPN)
    cmdcrondel = connect + " \"sed -i /sbcl\.py/d /etc/crontab \""
    if choice in rm:
        ChmyN="NO"
    elif choice in yes:
        ChmyN="YES"
        ChmyNReal="YES"
        choicech = raw_input(Yellow(tCheckMy)).lower()
        if choicech in yes:
            pass
        else:
            print Yellow(tPlconfMy)
            return
        cmdscp="scp -P{Port} /usr/share/sbcl/sbcl.py {User}@{IP}:/usr/sbin/".format(Port=ServerPortN,
            User=UserN, IP=ServerIPN)
        cmddb=connect+" \"mysql -e 'show databases;'\""
        cmddf=connect+" \"df -h\""
        print tResdf
        os.system(cmddf)
        if DirsInc == "Empty":
            DirsIncExample = DirIncDef
        else:
            DirsIncExample = DirsInc
        DirsIncN = raw_input(
                tDirBInc + ExampleIncDir  +Yellow(' [ Now:' + DirsInc + ' ]: ')) or DirsIncExample
        print (Yellow(tUdb))
        os.system(cmddb)
        print (Yellow(tAOS))
        if DBex == "Empty":
            DBexExample = DBexDef
        else:
            DBexExample = DBex
        DBexN = raw_input(tDBex + ExampleExDB +Yellow('[Now: '+DBex+']: ')) or  DBexExample
        if MyDumpOpt == "Empty":
            MyDumpOptExample = MysqlOptDef
        else:
            MyDumpOptExample = MyDumpOpt
        MyDumpOptN = raw_input(tMyDumpOpt + tDefMysqlOpt +Yellow('[Now:'+MyDumpOpt+']:' )) or MyDumpOptExample
        CronN = raw_input(tSbcltext + tSbclCron + tSbcltext2) or tSbclCron
        cmdcrondel = connect + " \"sed -i /sbcl\.py/d /etc/crontab \""
        cmdcron = connect +" \"echo '" + CronN + "' >> /etc/crontab\""
    else:
        pass
    if CronN is not None:
        print CronN + tAddtoCron
    if CronN is not None and ChmyN == "NO":
        MyDumpOptN="Empty"
        DirsIncN="Empty"
        DBexN="Empty"
    else:
        pass
    choice = raw_input(tDataCor).lower()
    if choice in yes:
        # print id
        data = {"Name":  ServerNameN, "User": UserN,  "ServerIP": ServerIPN, "ServerPort": ServerPortN, 
            "RsyncOpt": RsyncOptN, "Dirs": DirsN, "DirsExclude": DirsExcludeN, "Priv": PrivN,  
                "Frequency": FrequencyN, "CleanDate": CleanDateN,"DirsInc": DirsIncN, "DBex": DBexN, 
                    "MyDumpOpt": MyDumpOptN,  "Chmy": ChmyN }
                
        SB.coll.update({'_id': id}, {"$set": data}, upsert=False)
        if ChmyNReal == "YES":
            os.system(cmdscp)
            os.system(cmdcrondel)
            os.system(cmdcron)
        elif CronN == "NO":
            os.system(cmdcrondel)
            print tDelCronResult
        else:
            pass
        print Yellow(tEndofUpdate)
    elif choice in no:
        print tBye
        return exit(1)
    else:
        sys.stdout.write(tPlease)


def add():
    import re
    print Yellow(tNote)
    #import time
    #time.sleep(3)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choicech = raw_input(tCheckRsync).lower()
    if choicech in yes:
        pass
    else:
        print Yellow(tPlInR)
        return
    checkServer=None
    while checkServer is None:
        ServerName = raw_input(tServName)
        ServerName = ServerName.replace(' ', '').replace('\t', '')
        if ServerName != "":
            checkServer="True"
    checkip="True"
    while checkip:
        ServerIP = raw_input(tServIP)
        pat = re.compile("\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
        resultip=pat.match(ServerIP)
        if resultip:
            checkip=None
        else:
            checkip="True"
    User = raw_input(
        tUser + Defroot) or UserDef
    ServerPort = raw_input(tServPort + Defport) or PortDef
 #   ServerPort = ServerPort.replace(' ', '')
    RsyncOpt = raw_input(tOpR + Defop) or RsyncOptDef
    Priv = raw_input(tPriy + Defpri) or PrivDef
    Dirs = raw_input(tDirB + ExampleDir + ": ") or DirsDef
    DirsExclude = raw_input(
        tDirBx + ExampleDirEx + ": ") or ''
    Frequency = int(
        raw_input(tFB + DefFr) or FrequencyDef)
    CleanDate = int(
        raw_input(tCleanB + DefClean) or CleanDateDef)
    #PrCheck(ServerName, User,  ServerIP, ServerPort,
    #        RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate)
    choice = raw_input(tDataCor).lower()
    if choice in yes:
        print Yellow(tAddsshKey)
        #time.sleep(3)
        connect="ssh -p{Port} {User}@{IP} ".format(Port=ServerPort, User=User, IP=ServerIP)
        cmd="cat "+SB.PublickKey+" | "+connect+" \"mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys\""
        cmdscp="scp -P{Port} /usr/share/sbcl/sbcl.py {User}@{IP}:/usr/sbin/".format(Port=ServerPort,
            User=User, IP=ServerIP)
        cmdmklog=connect+"\"mkdir -p /var/log/sbclient\""
        os.system(cmd)
        os.system(cmdscp)
        os.system(cmdmklog)
        choise = raw_input(tDoUBackupMysql).lower()
        if choise in yes:
            choicech = raw_input(Yellow(tCheckMy)).lower()
            if choicech in yes:
                pass
            else:
                print Yellow(tPlconfMy)
                return
            Chmy="YES"
            cmd=connect+" \"df -h\""
            print tResdf
            os.system(cmd)
            DirsInc = raw_input(tDirBInc + '[default /var/backup]: ') or DirIncDef
            cmdmk=connect+"\"mkdir -p {dir}\"".format(dir=DirsInc)
            cmdmklog=connect+"\"mkdir -p /var/log/sbclient\""
            choice = raw_input(tDoUexdb).lower()
            if choice in yes:
                cmd=connect+" \"mysql -e 'show databases;'\""
                print Yellow(tUdb)
                os.system(cmd)
                print (Yellow("##############"))
                DBex = raw_input(tDBex + tdefExDb ) or DBexDef
            else:
                DBex="Empty"
            MyDumpOpt = raw_input(tMyDumpOpt + tDefMysqlOpt ) or MysqlOptDef
            Cron = raw_input(tSbcltext + tSbclCron + tSbcltext2) or tSbclCron
            cmdcron = connect +" \"echo '" + Cron + "' >> /etc/crontab\""
        else:
            Chmy="NO"
            MyDumpOpt="Empty"
            DirsInc="Empty"
            DBex="Empty"
        serv="^"+ServerName+"$"
        MongoIn(ServerName, User, ServerIP, ServerPort, RsyncOpt,
                Priv, Dirs, DirsExclude, Frequency, CleanDate, Chmy, MyDumpOpt, DirsInc, DBex )
        if Chmy == "YES":
            os.system(cmdmk)
            print tInstClient
            os.system(cmdcron)
        MongoFind(serv)
    elif choice in no:
        print tBye
        return
    else:
        sys.stdout.write(tPlease)


def Delete(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    List(allservers)
    if count == 0:
        return
    #PrCheck(ServerName,ServerIP,ServerPort, RsyncOpt,Priv,Dirs, DirsExclude )
    yes = set(['yes', 'y', 'ye'])
    no = set(['no', 'n', ''])
    choice = raw_input(tDuD).lower()
    if choice in yes:
        SB.coll.remove({'_id': id})
        choice = raw_input(tDuDel + SB.DirBackup+"/"+ServerName +" ").lower()
        if choice in yes:
            cmd="rm -fr {dir}".format(dir=SB.DirBackup+"/"+ServerName)
            os.system(cmd)
    elif choice in no:
        print tBye
    else:
        sys.stdout.write(tPlease)


def Command(Serv, Args):
    MongoFindName(Serv)
    try:
        connect="ssh -p{Port} {User}@{IP} ".format(Port=ServerPort, User=User, IP=ServerIP)
        cmd = connect +"\""+Args+"\""
        return os.system(cmd)
    except:
        return
    

def help():
    return """Help function: Basic Usage:
    \tadd or addhost           - Add host to backup
    \tl or  list               - List all hosts
    \tse or search             - Search host name, example:sbctl search w1.host.com
    \tup or update             - Update data of host, example:sbctl update w1.host.com
    \trm or remove             - Remove host, example: delete w1.host.com
    \tho or host               - Send command to remote host, example: sbctl host w1.host.com "ls -al /var/backup"
    \tbackup                   - Start backup, example: sbctl backup w1.host.com
    \n"""


def main():
    try:
        if sys.argv[1] == 'addhost' or sys.argv[1] == 'add':
            add()
        elif sys.argv[1] == 'list' or sys.argv[1] == 'l':
            MongoList()
        elif sys.argv[1] == 'search' or sys.argv[1] == 'se':
            MongoFind(sys.argv[2])
        elif sys.argv[1] == 'update' or sys.argv[1] == 'up':
            MongoUpdate(sys.argv[2])
        elif sys.argv[1] == 'remove' or sys.argv[1] == 'rm':
            Delete(sys.argv[2])
        elif sys.argv[1] == 'host' or sys.argv[1] == 'ho':
            Command(sys.argv[2], sys.argv[3])
        elif sys.argv[1] == "backup":
            cmd="sbd backup "+sys.argv[2]
            os.system(cmd)
        else:
            print help()
    except IndexError:
        print help()


if __name__ == '__main__':
    main()
