#!/usr/bin/python
# Copyright (c) 2017 Ruslan Variushkin,  ruslan@host4.biz
# Version 0.2.7
import sys
import SB

# text
tStart = "##########################\n"
tServName = "Server name: "
tServIP = "Server IP: "
tUser = "User:"
tServPort = "Server ssh port: "
tPriy = "Priority: "
tOpR = "Options of rsync: "
tLastD = "Last date of started backup: "
tLastDN = "Last date of end backup: "
tDirB = "Directories of backup example[/home,/var ] "
tDirBx = "Directories of exclude example[/home/Downloads/*,/var/log/*]: "
tFB = "Frequency of backup, hours: "
tCleanB = "Clean the backup server, days: "
tAOS = "##########################    amount of servers "
tHavenot = "Haven't got any host !\nBye "
tCheckInf = "Check information\nName: "
tDir = "Directory :"
tDirEx = "Exclude directory :"
tDataCor = "Data are correct? yes|no: "
tBye = "Bye!"
tPlease = "Please respond with 'yes' or 'no'"
tAddsshKey = "Add sshkey, please, prepare to enter a password of remote server of its first to connect"
tDuD = 'Do you really want to delete host? '
tDirBInc = "Incrimental directory: "
tDoUBackupMysql = "Doy you want ot backup MySQLy? yes|no: "
tResdf = "Result of \"df -h\" on your remote server"
tInstClient = "Install a cleant for MySQL backuing "
tDoUexdb = "Do you want ot exclude any databases? yes|no: "
tUdb = "Your databases: "
tDBex = "Exclude databases: "
tChmy = "Backup mysql: "

def MongoIn(Name, User, ServerIP, ServerPort, RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate, Chmy,  DirsInc=None, DBex=None ):
    SB.MongoCon()
    data = [{"Name": Name, "User": User,  "ServerIP": ServerIP, "ServerPort": ServerPort,  "RsyncOpt": RsyncOpt, "Priv": Priv,
             "Dirs": Dirs,   "DirsExclude":   DirsExclude,  "DateStart": "",  "DateEnd": "", "Frequency": Frequency,  "CleanDate": CleanDate, 
                    "Chmy": Chmy, "DirsInc": DirsInc, "DBex": DBex }]
    SB.coll.insert(data, True)


def List(allservers):
    from colorama import Fore, Style
    count = 0
    for R in allservers:
        count = count + 1
        global ServerName
        ServerName = R['Name']
        global User
        User = R['User']
        global ServerIP
        ServerIP = R['ServerIP']
        global ServerPort
        ServerPort = R['ServerPort']
        global Priv
        Priv = R['Priv']
        global RsyncOpt
        RsyncOpt = R['RsyncOpt']
        global Dirs
        Dirs = R['Dirs']
        global DirsExclude
        DirsExclude = R['DirsExclude']
        global Frequency
        Frequency = R['Frequency']
        global CleanDate
        CleanDate = R['CleanDate']
        global id
        id = R['_id']
        print tStart
        print (Fore.YELLOW + tServName + R['Name'])
        print tServIP,  R['ServerIP']
        print(Style.RESET_ALL)
        print tUser,  R['User']
        print tServPort,  R['ServerPort']
        print tPriy,  R['Priv']
        print tOpR + R['RsyncOpt']
        if R['DateStart']:
            print tLastD + R['DateStart']
        if R['DateEnd']:
            print tLastDN + R['DateEnd']
        print tDir + R['Dirs']
        print tDirEx + R['DirsExclude']
        print tFB,  Frequency
        print tCleanB, CleanDate
        print tChmy, R['Chmy']
        if R['Chmy'] == 'YES':
            print tDirBInc + R['DirsInc']
            print tDBex + R['DBex']+"\n"
    print tAOS, count
    if count == 0:
        print tHavenot
        return


def MongoList():
    SB.MongoCon()
    allservers = list(SB.coll.find())
    List(allservers)


def MongoFind(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": {'$regex': Name}}))
    List(allservers)


def PrCheck(Name, User, ServerIP, ServerPort, RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate):
    print tCheckInf + Name + "\n"+ tUser, User, "\n"+ tServIP, ServerIP, "\n"+tServPort,  ServerPort
    print tOpR + RsyncOpt + "\n"+tPriy,  Priv, "\n"+tDir + Dirs + "\n"+ tDirEx + DirsExclude 
    print tFB, Frequency, "\n"+ tCleanB, CleanDate


def MongoUpdate(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    List(allservers)
    ServerNameN = raw_input(
        tServName +' [default:' + ServerName + ']: ') or ServerName
    ServerNameN = ServerNameN.replace(' ', '')
    ServerIPN = raw_input(
        tServIP +' [defaul:' + ServerIP + '] : ') or ServerIP
    UserN = raw_input(
        tUser + ' [default:' + User + ']: ') or User
    ServerPortN = raw_input(
        tServPort +' [default: ' + str(ServerPort) + ' ] : ') or ServerPort
    RsyncOptN = raw_input(
        tOpR + '[default:' + RsyncOpt + '] ') or RsyncOpt
    PrivN = raw_input(tPriy  +' [ ' + str(Priv) + ' ] : ') or Priv
    DirsN = raw_input(tDir +' [ ' + Dirs + ' ] : ') or Dirs
    DirsExcludeN = raw_input(
        tDirEx + ' [ ' + DirsExclude + '] : ') or DirsExclude
    FrequencyN = int(raw_input(
        tFB +' [ ' + str(Frequency) + ' ]: ') or Frequency)
    CleanDateN = int(raw_input(
        tCleanB + ' [ ' + str(CleanDate) + ' ]: ') or CleanDate)
    PrCheck(ServerNameN, UserN, ServerIPN, ServerPortN, RsyncOptN,
            PrivN, DirsN, DirsExcludeN, FrequencyN, CleanDateN)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input(tDataCor).lower()
    if choice in yes:
        # print id
        data = {"Name":  ServerNameN, "User": UserN,  "ServerIP": ServerIPN, "ServerPort": ServerPortN, "RsyncOpt": RsyncOptN,
                "Dirs": DirsN, "DirsExclude": DirsExcludeN,  "Priv": PrivN, "Frequency": FrequencyN, "CleanDate": CleanDateN}
        #coll.update({'_id': R['_id']}, data, True)
        SB.coll.update({'_id': id}, {"$set": data}, upsert=False)
        # coll.update({'Name': Name }, data})
        # db.servers.update({ "_id" : ObjectId("58533139399923269b261261")},
        # {$set: { "Name" : "Agnejka"  }}  )
    elif choice in no:
        print tBye
        return
    else:
        sys.stdout.write(tPealse)


def add():
    import os
    import time
    from colorama import Fore, Style
    ServerName = raw_input(tServName)
    ServerName = ServerName.replace(' ', '')
    ServerIP = raw_input(tServIP)
 #   ServerIP = intServerIP.replace(' ', '')
    User = raw_input(
        tUser+' [default:root]') or "root"
    ServerPort = raw_input(tServPort +' [default:22] ') or 22
 #   ServerPort = ServerPort.replace(' ', '')
    RsyncOpt = raw_input(tOpR +' [default:-av] ') or '-av'
    Priv = raw_input(tPriy +' [default: 20 ] : ') or 20
    Dirs = raw_input(tDirB) or '/root,/var'
    DirsExclude = raw_input(
        tDirBx ) or ''
    Frequency = int(
        raw_input(tFB +' [default 24]: ') or 24)
    CleanDate = int(
        raw_input(tCleanB +' [default 7]: ') or 7)
    #PrCheck(ServerName, User,  ServerIP, ServerPort,
    #        RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input(tDataCor).lower()
    if choice in yes:
        print (Fore.YELLOW + tAddsshKey
                + Style.RESET_ALL)
        #time.sleep(3)
        connect="ssh -p{Port} {User}@{IP} ".format(Port=ServerPort, User=User, IP=ServerIP)
        cmd="cat ~/.ssh/id_rsa.pub | "+connect+" \"mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys\""
        os.system(cmd)
        choise = raw_input(tDoUBackupMysql).lower()
        if choise in yes:
            Chmy="YES"
            cmd=connect+" \"df -h\""
            print tResdf
            os.system(cmd)
            DirsInc = raw_input(tDirBInc + '[default /var/backup]: ') or '/var/backup'
            print tInstClient
            cmdcp="scp -P{Port} sbd.logrotate {User}@{IP}:/usr/sbin/".format(Port=ServerPort, User=User, IP=ServerIP)
            cmdmk=connect+"\"mkdir -p {dir}\"".format(dir=DirsInc)
            os.system(cmdmk)
            os.system(cmdcp)
            choice = raw_input(tDoUexdb).lower()
            if choice in yes:
                cmd=connect+" \"mysql -e 'show databases;'\""
                print tUdb
                os.system(cmd)
                DBex = raw_input(tDBex + '[default information_schema,performance_schema]: ') or 'information_schema,performance_schema'
        else:
            Chmy="NO"
        serv="^"+ServerName+"$"
        MongoIn(ServerName, User,  ServerIP,  ServerPort,  RsyncOpt,
                Priv,  Dirs,  DirsExclude, Frequency, CleanDate, Chmy, DirsInc, DBex )
        MongoFind(serv)
    elif choice in no:
        print tBye
        return
    else:
        sys.stdout.write(tPlease)


def Delete(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    List(allservers)
    #PrCheck(ServerName,ServerIP,ServerPort, RsyncOpt,Priv,Dirs, DirsExclude )
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input(tDuD).lower()
    if choice in yes:
        SB.coll.remove({'_id': id})
    elif choice in no:
        print tBye
        return
    else:
        sys.stdout.write(tPlease)


def help():
    print """Help function: Basic Usage:
    \tadd or addhost     - Add host to backup
    \tl or  list               - List all hosts
    \tse or search             - Search host name, example: search w1.host.com
    \tup or update             - Update data of host, example: update w1.host.com
    \trm or remove             - Remove host, example: delete w1.host.com 
    \n"""


def main():
    try:
        if sys.argv[1] == 'addhost' or sys.argv[1] == 'add':
            add()
        elif sys.argv[1] == 'list' or sys.argv[1] == 'l':
            MongoList()
        elif sys.argv[1] == 'search' or sys.argv[1] == 'se':
            MongoFind(sys.argv[2])
        elif sys.argv[1] == 'update' or sys.argv[1] == 'up':
            MongoUpdate(sys.argv[2])
        elif sys.argv[1] == 'remove' or sys.argv[1] == 'rm':
            Delete(sys.argv[2])
        else:
            help()
    except IndexError:
        help()


if __name__ == '__main__':
    main()
