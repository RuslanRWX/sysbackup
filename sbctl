#!/usr/bin/python
# Copyright (c) 2017 Ruslan Variushkin,  ruslan@host4.biz
# Version 0.2.7
import sys
import SB

def MongoIn(Name, User, ServerIP, ServerPort, RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate):
    SB.MongoCon()
    data = [{"Name": Name, "User": User,  "ServerIP": ServerIP, "ServerPort": ServerPort,  "RsyncOpt": RsyncOpt, "Priv": Priv,
             "Dirs": Dirs,   "DirsExclude":   DirsExclude,  "DateStart": "",  "DateEnd": "", "Frequency": Frequency,  "CleanDate": CleanDate}]
    SB.coll.insert(data, True)


def List(allservers):
    from colorama import Fore, Style
    count = 0
    for R in allservers:
        count = count + 1
        global ServerName
        ServerName = R['Name']
        global User
        User = R['User']
        global ServerIP
        ServerIP = R['ServerIP']
        global ServerPort
        ServerPort = R['ServerPort']
        global Priv
        Priv = R['Priv']
        global RsyncOpt
        RsyncOpt = R['RsyncOpt']
        global Dirs
        Dirs = R['Dirs']
        global DirsExclude
        DirsExclude = R['DirsExclude']
        global Frequency
        Frequency = R['Frequency']
        global CleanDate
        CleanDate = R['CleanDate']
        global id
        id = R['_id']
        print "##########################\n"
        print (Fore.YELLOW + "Server name: " + R['Name'])
        print "Server IP: ",  R['ServerIP']
        print(Style.RESET_ALL)
        print "User:",  R['User']
        print "Server ssh port: ",  R['ServerPort']
        print "Priority: ",  R['Priv']
        print "Options of rsync: " + R['RsyncOpt']
        if R['DateStart']:
            print "Last date of started backup: " + R['DateStart']
        if R['DateEnd']:
            print "Last date of end backup: " + R['DateEnd']
        print "Dirs of backup example[/home,/var ] " + R['Dirs']
        print "Dirs exclude example[/home/Downloads/*,/var/log/*]: " + R['DirsExclude']
        print "Frequency of backup, hours: ",  Frequency
        print "Clean the backup server, days: ", CleanDate, "\n"
    print "##########################    amount of servers ", count
    if count == 0:
        print "Haven't got any host !\nBye "
        exit(1)


def MongoList():
    SB.MongoCon()
    allservers = list(SB.coll.find())
    List(allservers)


def MongoFind(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": {'$regex': Name}}))
    List(allservers)


def PrCheck(Name, User, ServerIP, ServerPort, RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate):
    print "Check information\nName: " + Name + "\nUser:", User, "\nCleint IP: ", ServerIP, "\nServer SSH port: ",  ServerPort
    print "Rsync options: " + RsyncOpt + "\nPriority: ",  Priv, "\nDirectory :" + Dirs + "\nExclude directory :" + DirsExclude 
    print "Frequency of backups, hours :", Frequency, "\nClean the backup server, days:", CleanDate


def MongoUpdate(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    List(allservers)
    ServerNameN = raw_input(
        'Enter server name [default:' + ServerName + ']: ') or ServerName
    ServerIPN = raw_input(
        'Enter server IP [defaul:' + ServerIP + '] : ') or ServerIP
    UserN = raw_input(
        'Enter user [default:' + User + ']: ') or User
    ServerPortN = raw_input(
        'Enter server SSH port [default: ' + str(ServerPort) + ' ] : ') or ServerPort
    RsyncOptN = raw_input(
        'Enter options of rsync [default:' + RsyncOpt + '] ') or RsyncOpt
    PrivN = raw_input('Priority  now [ ' + str(Priv) + ' ] : ') or Priv
    DirsN = raw_input('Dirs of backup now [ ' + Dirs + ' ] : ') or Dirs
    DirsExcludeN = raw_input(
        'Dirs exclude now [ ' + DirsExclude + '] : ') or DirsExclude
    FrequencyN = int(raw_input(
        'Frequency of backups, hours, now [ ' + str(Frequency) + ' ]: ') or Frequency)
    CleanDateN = int(raw_input(
        'Clean the backup server, mtime, now [ ' + str(CleanDate) + ' ]: ') or CleanDate)
    PrCheck(ServerNameN, UserN, ServerIPN, ServerPortN, RsyncOptN,
            PrivN, DirsN, DirsExcludeN, FrequencyN, CleanDateN)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input('Data are correct? y/ye/yes|n/no: ').lower()
    if choice in yes:
        # print id
        data = {"Name":  ServerNameN, "User": UserN,  "ServerIP": ServerIPN, "ServerPort": ServerPortN, "RsyncOpt": RsyncOptN,
                "Dirs": DirsN, "DirsExclude": DirsExcludeN,  "Priv": PrivN, "Frequency": FrequencyN, "CleanDate": CleanDateN}
        #coll.update({'_id': R['_id']}, data, True)
        SB.coll.update({'_id': id}, {"$set": data}, upsert=False)
        # coll.update({'Name': Name }, data})
        # db.servers.update({ "_id" : ObjectId("58533139399923269b261261")},
        # {$set: { "Name" : "Agnejka"  }}  )
    elif choice in no:
        print "Bye"
        return
    else:
        sys.stdout.write("Please respond with 'yes' or 'no'")


def add():
    import os
    import time
    from colorama import Fore, Style
    ServerName = raw_input('Enter server name or host name: ')
    ServerIP = raw_input('Enter sever IP: ')
    User = raw_input(
        'Enter user name: [default:root]') or "root"
    ServerPort = raw_input('Enter SSH port [default:22] ') or 22
    RsyncOpt = raw_input('Enter options of rsync [default:-av] ') or '-av'
    Priv = raw_input('Priority default [ 20 ] : ') or 20
    Dirs = raw_input('Dirs of backup example[/root,/var ] : ') or '/root,/var'
    DirsExclude = raw_input(
        'Dirs exclude example[/var/lib/*,/var/log/*] :') or ''
    Frequency = int(
        raw_input('Frequency of backups, hours [default 24]: ') or 24)
    CleanDate = int(
        raw_input('Clean the backup server, days [default 7]: ') or 7)
    PrCheck(ServerName, User,  ServerIP, ServerPort,
            RsyncOpt, Priv, Dirs, DirsExclude, Frequency, CleanDate)
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input('Data are correct? ').lower()
    if choice in yes:
        MongoIn(ServerName, User,  ServerIP,  ServerPort,  RsyncOpt,
                Priv,  Dirs,  DirsExclude, Frequency, CleanDate)
        print (Fore.YELLOW +"Add sshkey, please, prepare to enter a password of remote server of its first to connect"
        
                + Style.RESET_ALL)
        time.sleep(3)
        cmd="cat ~/.ssh/id_rsa.pub | ssh -p{Port} {User}@{IP} \"mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys\"".format(
                Port=ServerPort, User=User, IP=ServerIP )
        os.system(cmd)
        serv="^"+ServerName+"$"
        MongoFind(serv)
        os.system(cmd)
    elif choice in no:
        print "Bye"
        return
    else:
        sys.stdout.write("Please respond with 'yes' or 'no'")


def Delete(Name):
    SB.MongoCon()
    allservers = list(SB.coll.find({"Name": Name}))
    List(allservers)
    #PrCheck(ServerName,ServerIP,ServerPort, RsyncOpt,Priv,Dirs, DirsExclude )
    yes = set(['yes', 'y', 'ye', ''])
    no = set(['no', 'n'])
    choice = raw_input('Do you really want to delete host? ').lower()
    if choice in yes:
        SB.coll.remove({'_id': id})
    elif choice in no:
        print "Bye"
        return
    else:
        sys.stdout.write("Please respond with 'yes' or 'no'")


def help():
    print """Help function: Basic Usage:
    \tadd or addhost     - Add host to backup
    \tl or  list               - List all hosts
    \tse or search             - Search host name, example: search w1.host.com
    \tup or update             - Update data of host, example: update w1.host.com
    \trm or remove             - Remove host, example: delete w1.host.com 
    \n"""


def main():
    try:
        if sys.argv[1] == 'addhost' or sys.argv[1] == 'add':
            add()
        elif sys.argv[1] == 'list' or sys.argv[1] == 'l':
            MongoList()
        elif sys.argv[1] == 'search' or sys.argv[1] == 'se':
            MongoFind(sys.argv[2])
        elif sys.argv[1] == 'update' or sys.argv[1] == 'up':
            MongoUpdate(sys.argv[2])
        elif sys.argv[1] == 'remove' or sys.argv[1] == 'rm':
            Delete(sys.argv[2])
        else:
            help()
    except IndexError:
        help()


if __name__ == '__main__':
    main()
