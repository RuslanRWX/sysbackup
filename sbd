#!/usr/bin/python
# Copyright (c) 2017 Ruslan Variushkin,  ruslan@host4.biz
# Version 0.2.2

import ConfigParser
import os
import threading
import Queue
import time
import random
import sys
import SB
import datetime
pid = str(os.getpid())


def CreateTmpFiles(Name,  Dirs, DirsEx):
    Dirs = Dirs.replace(',', '\n') + "\n"
    DirsEx = DirsEx.replace(',', '\n') + "\n"
    FileNameIn = SB.tmp+"/" + Name + "_inc.txt"
    FileNameEx = SB.tmp+"/" + Name + "_ex.txt"
    FileIn = open(FileNameIn,  "w")
    FileIn.write(Dirs)
    FileIn.close()
    FileEx = open(FileNameEx,  "w")
    FileEx.write(DirsEx)
    FileEx.close()


def DateCheck(checkdate):
    checkdate = int(checkdate)
    # print checkdate
    date0 = datetime.datetime.now() - datetime.timedelta(hours=checkdate)
    date = date0.isoformat()
    #dateCh = "%s000000" % (date)
    return date


class Backup:
    def __init__(self, S):
        self.Server = S

    def run(self):
        SB.MongoCon()
        Mq = SB.coll.find()
        Server = self.Server
        from random import randint
        from time import sleep
        SL = (randint(1, 20))
        ServerData = list(SB.coll.find({"Name": Server}))
        ts = time.time()
        ISODateStart = datetime.datetime.now().isoformat()
        for R in ServerData:
            chdate = DateCheck(R["Frequency"])
            # print "Check date: ", chdate
            # print "Date End: ", R["DateEnd"]
            if R["DateEnd"] > chdate:
                # print R["Name"]
                return
            CreateTmpFiles(R["Name"],  R["Dirs"], R["DirsExclude"])
            id = R['_id']
            print "###########Start Backup############\n"
            print "Server name: " + R['Name']
            print "User: ",  R['User']
            print "Server IP: ",  R['ServerIP']
            print "Server port: ",  R['ServerPort']
            print "Options of rsync: " + R['RsyncOpt'] + "\n"
            print "Dirs : " + R['Dirs']
            print "Dirs exclude: " + R['DirsExclude']
            print "DateStart :" + R['DateStart']
            print "Sleep Start backup  " + str(SL) + "\n"
            DateUp = {"DateStart": ISODateStart}
            SB.coll.update({'_id': id}, {"$set": DateUp}, upsert=False)
            Name = R['Name']
            DirB = SB.DirBackup + "/" + Name
            DirBL = SB.DirBackup + "/" + Name + "/" + ISODateStart
            ExFile = SB.tmp+"/" + Name + "_ex.txt"
            InFile = SB.tmp+"/" + Name + "_inc.txt"
            print "Start rsync ! "
            if not os.path.exists(DirB):
                os.makedirs(DirB)
            if not os.path.exists(DirBL):
                os.makedirs(DirBL)
            for RD in R['Dirs'].split(","):
                cmd = "/usr/bin/rsync  {rsopt} --progress -e \"ssh -p {port}\"  --delete  --timeout=600 --ignore-errors --exclude-from={exf} --link-dest={dir}/Latest   {user}@{ip}:{rd}  {dirbl}".format(rsopt=R['RsyncOpt'], port=R['ServerPort'], exf=ExFile, dir=DirB, user=R['User'], ip=R['ServerIP'], rd=RD, dirbl=DirBL)
                os.system(cmd)
                # rsync dbs cmd
            print DirBL
            print DirB
            Link = DirB + "/" + "Latest"
            if os.path.exists(Link):
                os.remove(Link)
            os.symlink(DirBL, Link)
            # time.sleep(SL)
            ISODateEnd = datetime.datetime.now().isoformat()
            DateUp = {"DateEnd": ISODateEnd}
            SB.coll.update({'_id': id}, {"$set": DateUp}, upsert=False)
            print "###########End Backup  ###  " + R['Name'] + " #########\n"
            print "Server name: " + R['Name']
            print "DateEnd :" + R["DateEnd"]
            print "Start clean the backup server"
            cmdclean = "/usr/bin/find %s -mtime +%s -maxdepth 1 -exec rm -r '{}' \;" % (
                DirB, R['CleanDate'])
            os.system(cmdclean)
       # time.sleep(SL)


def CreateQ():
    ServersQ = {}
    SB.MongoCon()
    Mq = SB.coll.find().sort('Priv',  1)
    allservers = list(Mq)
    return allservers


def worker():
    while True:
        item = q.get()
        Back = Backup(item)
        Back.run()
        q.task_done()


def Q():
    global q
    q = Queue.Queue(0)
    for i in range(SB.Num_thread):
        t = threading.Thread(target=worker)
        t.daemon = True
        t.start()
    for item in CreateQ():
        q.put(item["Name"])
    q.join()


def Check():
    tmp = SB.tmp
    if not os.path.exists(tmp):
        os.makedirs(tmp)
    if os.path.isfile(SB.Pidfile):
        print "%s already exists, exiting" % (SB.Pidfile)
        sys.exit()
    else:
        file(SB.Pidfile, 'w').write(pid)


def help():
    return """Help function: Basic Usage:\n
    \tstart      - Start the sbd deamon
    \tstop       - Stop the sbd deamon
    \trestart    - Restart the sbd deamon
    \thelp       - Print help\n"""


def Stop():
    if os.path.isfile(SB.Pidfile):
        f=open(SB.Pidfile, "r")
        f=readline()
        PID=int(f)
        os.kill(PID, signal.SIGKILL)
        print "sbd is stopped"
    else:
        print "sbd is not running"


def Start():
    print "Start sbd"
    Check()
    while True:
        Q()
        time.sleep(60)


def main():
    try:
        if sys.argv[1] == 'start':
            Start()
        elif sys.argv[1] == 'stop':
            Stop()
        elif sys.argv[1] == 'restart':
            Stop()
            Start()
        else:
            print help()
    except IndexError:
        print help()


if __name__ == '__main__':
    main()
