#!/usr/bin/python
# Copyright (c) 2017 Ruslan Variushkin,  ruslan@host4.biz
# Version 0.2.3
global Ver
Ver = "0.2.5"
import ConfigParser
import os
import threading
import Queue
import time
import random
import sys
import SB
import datetime
pid = str(os.getpid())
import re


def CreateTmpFiles(Name, Dirs, DirsEx):
    Dirs = Dirs.replace(',', '\n') + "\n"
    DirsEx = DirsEx.replace(',', '\n') + "\n"
    FileNameIn = SB.tmp+"/" + Name + "_inc.txt"
    FileNameEx = SB.tmp+"/" + Name + "_ex.txt"
    FileIn = open(FileNameIn,  "w")
    FileIn.write(Dirs)
    FileIn.close()
    FileEx = open(FileNameEx,  "w")
    FileEx.write(DirsEx)
    FileEx.close()


def DateCheck(checkdate):
    checkdate = int(checkdate)
    # print checkdate
    date0 = datetime.datetime.now() - datetime.timedelta(hours=checkdate)
    date = date0.isoformat()
    #dateCh = "%s000000" % (date)
    return date

def log(text):
    logf = open(SB.Log,"a")
    logf.write(text)
    logf.close()

class Backup:
    def __init__(self, S):
        self.Server = S

    def run(self):
        SB.MongoCon()
        Mq = SB.coll.find()
        Server = self.Server
        #from random import randint
        #from time import sleep
        #SL = (randint(1, 20))
        SD = list(SB.coll.find({"Name": Server}))
        for R in SD:
            Name = R["Name"]
            CleanDate = R["CleanDate"]
            Frequency = R["Frequency"]
            DateEnd = R["DateEnd"]
            DirsExclude = R["DirsExclude"]
            Dirs = R["Dirs"]
            User = R["User"]
            id = R["_id"]
            ServerIP = R["ServerIP"]
            ServerPort = R["ServerPort"]
            RsyncOpt = R["RsyncOpt"]
            Dirs = R["Dirs"]
            Dirs = R["Dirs"]
            DirsExclude = R["DirsExclude"]
            DateStart = R["DateStart"]
        ts = time.time()
        ISODateStart = datetime.datetime.now().isoformat()
        chdate = DateCheck(Frequency)
        #print "Name", Name
        #print "Check date: ", chdate
        #print "Date End: ", DateEnd
        if DateEnd > chdate:
            return
        CreateTmpFiles(Name, Dirs, DirsExclude)
        text="""\n###########Start Backup######
        Now TIME: {time}
        Server name: {name}
        User: {user}
        Server IP: {ip}
        Server port: {port}
        Options of rsync: {rsyncOpt}
        Dirs : {dirs}
        Dirs exclude: {dirE}
        DateStart : {dateS}\n"""
        text=text.format(time=datetime.datetime.now(), name=Name,user=User,ip=ServerIP,port=ServerPort,rsyncOpt=RsyncOpt,dirs=Dirs,dirE=DirsExclude,dateS=DateStart)
        #print text
        log(text)
        DateUp = {"DateStart": ISODateStart}
        SB.coll.update({'_id': id}, {"$set": DateUp}, upsert=False)
        DirB = SB.DirBackup + "/" + Name
        DirBL = SB.DirBackup + "/" + Name + "/" + ISODateStart
        ExFile = SB.tmp+"/" + Name + "_ex.txt"
        InFile = SB.tmp+"/" + Name + "_inc.txt"
        #print "Start rsync ! "
        if not os.path.exists(DirB):
            os.makedirs(DirB)
        if not os.path.exists(DirBL):
            os.makedirs(DirBL)
        for RD in Dirs.split(","):
            RD = re.sub(r'\/$', '', RD)
            cmd = "/usr/bin/rsync  {rsopt} --log-file={logdir}/{serv}.log --progress -e \"/usr/bin/ssh -p {port}\"  --delete  --timeout=600 --ignore-errors --exclude-from={exf} --link-dest={dir}/Latest   {user}@{ip}:{rd}  {dirbl} ".format(rsopt=RsyncOpt, port=ServerPort, exf=ExFile, dir=DirB, user=User, ip=ServerIP, rd=RD, dirbl=DirBL, logdir=SB.LogDir, serv=Name)
            os.system(cmd)
            #print cmd
        #print DirBL
        #print DirB
        Link = DirB + "/" + "Latest"
        try:
            os.remove(Link)
            time.sleep(10)
        except:
            pass
        #link="ln -s {dir} {lin}".format(dir=DirBL, lin=Link)
        os.symlink(DirBL, Link)
        #os.system(link)
        ISODateEnd = datetime.datetime.now().isoformat()
        DateUp = {"DateEnd": ISODateEnd}
        SB.coll.update({'_id': id}, {"$set": DateUp}, upsert=False)
        text="""\n############End Backup  #######
        Now TIME: {time}
        Server name: {name}
        DateEnd : {date}"""
        text=text.format(time=datetime.datetime.now(), name=Name, date=DateEnd)
        log(text)
        #cmdclean = "/usr/bin/find %s -maxdepth 1 -mtime +%s -exec rm -r '{}' \;" % (
        #    DirB, CleanDate)
        Drs=set()
        rDir=os.listdir(DirB)
        CleanD = int(CleanDate) * 24
        #print CleanDate
        #print CleanD
        DCh=DateCheck(CleanD)
        for rd in rDir:
            Drs.add(rd)
        Drs.discard("Latest")
        resultDir = filter(lambda x: DCh > x, Drs)
        #print "Start check dir"
        #print "Chekc date:",  DCh
        if resultDir != []:
            for D in resultDir:
                path=DirB+"/"+D
                #print path
                cmd="/bin/rm -rf {p}".format(p=path)
                os.system(cmd)
        #text="\nStart clean the backup server\nCommand: {com}".format(com=cmdclean)
        #log(text)


def CreateQ():
    ServersQ = {}
    SB.MongoCon()
    Mq = SB.coll.find().sort('Priv',  1)
    allservers = list(Mq)
    return allservers


def worker():
    while True:
        item = q.get()
        Back = Backup(item)
        Back.run()
        q.task_done()


def Q():
    global q
    q = Queue.Queue(0)
    for i in range(SB.Num_thread):
        t = threading.Thread(target=worker)
        t.daemon = True
        t.start()
    for item in CreateQ():
        q.put(item["Name"])
    q.join()


def Check():
    tmp=SB.tmp
    LogDir=SB.LogDir
    if not os.path.exists(tmp):
        os.makedirs(tmp)
    if not os.path.exists(LogDir):
        os.makedirs(LogDir)
    if os.path.isfile(SB.Pidfile):
        text="\n{pd} already exists, exiting \n".format(pd=SB.Pidfile)
        log(text)
        print text
        return sys.exit(1)
    else:
        file(SB.Pidfile, 'w').write(pid)


def help():
    return """Help function: Basic Usage:\n
    \tstart      - Start the sbd deamon
    \tstop       - Stop the sbd deamon
    \trestart    - Restart the sbd deamon
    \thelp       - Print help\n"""


def Stop():
    text="\nStoped sbd {date}\n".format(date=datetime.datetime.now())
    log(text)
    print text
    if os.path.isfile(SB.Pidfile):
        f=open(SB.Pidfile, "r")
        PID=int(f.read())
        os.system('/usr/bin/pkill -TERM -P {pid}'.format(pid=PID))
        os.remove(SB.Pidfile)
        os.system('/usr/bin/pkill rsync')
        f.close()
        print "sbd is stopped"
    else:
        print "sbd is not running"


def Start():
    text="\nStart sbd version:{ver}, date: {date}\n".format(ver=Ver, date=datetime.datetime.now())
    log(text)
    print text
    while True:
        text="\nStart queue, date: {date}".format(date=datetime.datetime.now())
        log(text)
        Q()
        text="\nQueue is done, date: {date}\n".format(date=datetime.datetime.now())
        log(text)
        time.sleep(3600)


def main():
    try:
        if sys.argv[1] == 'start':
            Check()
            Start()
        elif sys.argv[1] == 'stop':
            Stop()
        elif sys.argv[1] == 'restart':
            Stop()
            Start()
        else:
            print help()
    except IndexError:
        print help()


if __name__ == '__main__':
    main()
